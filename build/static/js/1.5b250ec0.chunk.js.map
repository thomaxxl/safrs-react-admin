{"version":3,"sources":["components/external/index.js","components/external/UserPasswordTab.js","components/CreateUser.js","components/DBForm.js","components/ApiAdmin.js","components/Custom.js"],"names":["MyComp","props","UserPasswordTab","conf","useConf","notify","useNotify","record","useRecordContext","useDataProvider","useState","pwdValue","setPwdValue","rpwdValue","setRPwdValue","submitColor","setSubmitColor","Box","component","sx","m","width","noValidate","autoComplete","FormControl","Grid","item","xs","spacing","margin","Typography","variant","id","label","type","onChange","e","target","value","length","console","log","Button","color","onClick","data","httpAuthClient","api_root","method","body","JSON","stringify","then","catch","CreateUser","resource_name","resource","resources","Create","SimpleForm","container","style","attributes","map","attr","TextInput","source","name","fullWidth","PasswordInput","defaultValue","inputProps","autocomplete","renderTextField","input","meta","touched","invalid","error","custom","placeholder","helperText","renderCheckbox","control","Checkbox","checked","radioButton","rest","renderFromHelper","FormHelperText","renderSelectField","children","InputLabel","htmlFor","Select","native","boxStyle","reduxForm","form","validate","values","errors","forEach","field","email","test","handleSubmit","pristine","reset","submitting","classes","onSubmit","Field","multiline","rowsMax","disabled","position","top","left","transform","bgcolor","border","boxShadow","p","textAlign","useStyles","makeStyles","joined_field","cursor","modalStyle","overflow","height","display","fontWeight","db_btn","db_grid","borderBottom","paddingBottom","paddingRight","actions","conn_str","backgroundColor","fontFamily","C2Rpc","url","options","defaultOptions","headers","localStorage","getItem","requestOptions","Object","assign","fetch","ApiModal","React","open","setOpen","output","setOutput","box_style","setBoxStyle","stopPropagation","className","title","Modal","onClose","connection_string","port","hostname","create_url","Loading","response","json","create_api","ApiGenerateField","mode","ApiShow","show","DBConnectionEdit","useForm","other","setOther","username","setUsername","password","setPassword","dbhost","setDbhost","dbname","setDbname","dialect","setDialect","logdata","setLogData","create_conn","result","initialValue","size","FormLabel","RadioGroup","FormControlLabel","Radio","err","alert","test_conn","change","undefined","msg","DBConnection","ApiURL","href","SampleColumnField","attribute","TextField","EmployeeLabel","employee","instance","FirstName","LastName","CustomerLabel","customer","CompanyName","ContactName","UserPasswordField","CustomTab"],"mappings":"2uBACaA,EAAS,SAACC,GACnB,OAAO,yC,+ECSEC,EAAkB,WAC3B,IAAMC,EAAOC,cACPC,EAASC,cACTC,EAASC,cAEf,GADqBC,cACWC,mBAAS,KAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAoCA,OACI,cAACC,EAAA,EAAD,CACAC,UAAU,OACVC,GAAI,CACA,uBAAwB,CAAEC,EAAG,EAAGC,MAAO,SAE3CC,YAAU,EACVC,aAAa,MANb,SAQA,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,EAAvC,SACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQb,UAAU,IAAtC,SAA2C,6DAE/C,cAACO,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,EAAvC,SACA,cAAC,IAAD,CACIG,GAAG,0BACHC,MAAM,eACNC,KAAK,WACLC,SArDQ,SAACC,GACjB,IAAIzB,EAAWyB,EAAEC,OAAOC,MACxB1B,EAAYD,GACZK,EAAeL,IAAaE,GAAaF,EAAS4B,OAAS,EAAK,UAAY,IAC5EC,QAAQC,IAAI9B,EAAUE,QAoDlB,cAACY,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,EAAvC,SACA,cAAC,IAAD,CACIG,GAAG,0BACHC,MAAM,kBACNC,KAAK,WACLC,SAvDS,SAACC,GAClB,IAAIvB,EAAYuB,EAAEC,OAAOC,MACzBxB,EAAaD,GACbG,EAAeL,IAAaE,GAAaF,EAAS4B,OAAS,EAAI,UAAY,IAC3EC,QAAQC,IAAI9B,EAAUE,QAsDlB,cAACY,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,EAAvC,SACA,cAACa,EAAA,EAAD,CAAQX,QAAQ,YAAYY,MAAO5B,EAAa6B,QApDnC,WAEjB,GADAJ,QAAQC,IAAI5B,GACTF,IAAaE,EAIhB,GAAGF,EAAS4B,OAAS,EACjBlC,EAAO,qBAAuB,CAAE6B,KAAM,gBAD1C,CAIA,IAAMW,EAAO,CACT,SAAYlC,GAEhBmC,YAAe,GAAD,OAAI3C,EAAK4C,SAAT,kBAA2BxC,EAAOyB,GAAlC,oBAAwD,CAClEgB,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,KAExBO,MAAK,kBAAI/C,EAAO,wBAChBgD,OAAM,kBAAIhD,EAAO,0BAA4B,CAAE6B,KAAM,oBAflD7B,EAAO,wBAA2B,CAAE6B,KAAM,aAiD1C,4B,uECzECoB,EAAc,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,cAAkBtD,EAAW,iBAEhDuD,EADOpD,cACSqD,UAAUF,GAEhC,OAAO,cAACG,EAAA,EAAD,2BAAYzD,GAAZ,aACK,cAAC0D,EAAA,EAAD,UACI,eAAClC,EAAA,EAAD,CAAMmC,WAAS,EAAChC,QAAS,EAAGC,OAAQ,EAAGT,EAAG,IAAKyC,MAAO,CAAExC,MAAO,OAA/D,UACKmC,EAASM,WAAWC,KAAI,SAACC,GAAD,OAAU,eAACvC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,EAAvC,cAA4C,cAACoC,EAAA,EAAD,CAAWC,OAAQF,EAAKG,KAAMC,WAAS,IAAnF,UACnC,cAAC3C,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,EAAvC,SACI,cAACwC,EAAA,EAAD,CAAepC,MAAM,WAAWqC,aAAa,GAAGF,WAAS,EAACG,WAAY,CAAEC,aAAc,wBAE1F,cAAC/C,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,EAAvC,SACI,cAACwC,EAAA,EAAD,CAAepC,MAAM,kBAAkBqC,aAAa,GAAGF,WAAS,EAACG,WAAY,CAAEC,aAAc,iC,iSCYnHC,GAAkB,SAAC,GAAD,IACtBxC,EADsB,EACtBA,MACAyC,EAFsB,EAEtBA,MAFsB,IAGtBC,KAAQC,EAHc,EAGdA,QAASC,EAHK,EAGLA,QAASC,EAHJ,EAGIA,MACvBC,EAJmB,wBAMtB,cAAC,IAAD,yBACE9C,MAAOA,EACP+C,YAAa/C,EACb6C,MAAOF,GAAWC,EAClBI,WAAYL,GAAWE,GACnBJ,GACAK,KAIFG,GAAiB,SAAC,GAAD,IAAGR,EAAH,EAAGA,MAAOzC,EAAV,EAAUA,MAAV,OACrB,8BACE,cAAC,IAAD,CACEkD,QACE,cAACC,EAAA,EAAD,CACEC,UAASX,EAAMpC,MACfH,SAAUuC,EAAMvC,WAGpBF,MAAOA,OAKPqD,GAAc,SAAC,GAAD,IAAGZ,EAAH,EAAGA,MAAUa,EAAb,wBAClB,cAAC,IAAD,UACE,eAAC,IAAD,uCAAgBb,GAAWa,GAA3B,cACE,cAAC,IAAD,CAAkBjD,MAAM,SAAS6C,QAAS,cAAC,IAAD,IAAWlD,MAAM,WAC3D,cAAC,IAAD,CAAkBK,MAAM,OAAO6C,QAAS,cAAC,IAAD,IAAWlD,MAAM,SACzD,cAAC,IAAD,CAAkBK,MAAM,QAAQ6C,QAAS,cAAC,IAAD,IAAWlD,MAAM,iBAK1DuD,GAAmB,SAAC,GAAwB,IAAtBZ,EAAqB,EAArBA,QAASE,EAAY,EAAZA,MACnC,OAAMF,GAAWE,EAGR,cAACW,EAAA,EAAD,UAAiBb,GAAWE,SAFnC,GAMEY,GAAoB,SAAC,GAAD,IACxBhB,EADwB,EACxBA,MADwB,KAExBzC,MAFwB,EAGxB0C,MAAQC,EAHgB,EAGhBA,QAASE,EAHO,EAGPA,MACjBa,EAJwB,EAIxBA,SACGZ,EALqB,wBAOxB,eAAC,IAAD,CAAaD,MAAOF,GAAWE,EAA/B,UACE,cAACc,EAAA,EAAD,CAAYC,QAAQ,oBAApB,iBACA,cAACC,EAAA,EAAD,qCACEC,QAAM,GACFrB,GACAK,GAHN,IAIER,WAAY,CACVJ,KAAM,MACNnC,GAAI,qBANR,SASG2D,KAEFH,GAAiB,CAAEZ,UAASE,cCnF3BkB,IDqJSC,YAAU,CACvBC,KAAM,iBACNC,SA/Je,SAAAC,GACf,IAAMC,EAAS,GAmBf,MAlBuB,CACrB,YACA,WACA,QACA,gBACA,SAEaC,SAAQ,SAAAC,GAChBH,EAAOG,KACVF,EAAOE,GAAS,eAIlBH,EAAOI,QACN,4CAA4CC,KAAKL,EAAOI,SAEzDH,EAAOG,MAAQ,yBAEVH,IAyIMJ,EA9DQ,SAAAhG,GACrB,IAAQyG,EAAuDzG,EAAvDyG,aAAcC,EAAyC1G,EAAzC0G,SAAUC,EAA+B3G,EAA/B2G,MAAOC,EAAwB5G,EAAxB4G,WAAYC,EAAY7G,EAAZ6G,QACnD,OACE,uBAAMC,SAAUL,EAAhB,UACE,8BACE,cAACM,EAAA,EAAD,CACE7C,KAAK,YACLjD,UAAWuD,GACXxC,MAAM,iBAGV,8BACE,cAAC+E,EAAA,EAAD,CAAO7C,KAAK,WAAWjD,UAAWuD,GAAiBxC,MAAM,gBAE3D,8BACE,cAAC+E,EAAA,EAAD,CAAO7C,KAAK,QAAQjD,UAAWuD,GAAiBxC,MAAM,YAExD,8BACE,eAAC+E,EAAA,EAAD,CAAO7C,KAAK,MAAMjD,UAAWoE,GAA7B,UACE,cAAC,IAAD,CAAOhD,MAAM,OAAOL,MAAM,SAC1B,cAAC,IAAD,CAAOK,MAAM,SAASL,MAAM,gBAGhC,8BACE,eAAC+E,EAAA,EAAD,CACEF,QAASA,EACT3C,KAAK,gBACLjD,UAAWwE,GACXzD,MAAM,iBAJR,UAME,wBAAQK,MAAM,KACd,wBAAQA,MAAO,SAAf,iBACA,wBAAQA,MAAO,SAAf,mBACA,wBAAQA,MAAO,SAAf,uBAGJ,8BACE,cAAC0E,EAAA,EAAD,CAAO7C,KAAK,WAAWjD,UAAWgE,GAAgBjD,MAAM,eAE1D,wBACA,8BACE,cAAC+E,EAAA,EAAD,CACE7C,KAAK,QACLjD,UAAWuD,GACXxC,MAAM,QACNgF,WAAS,EACTC,QAAQ,IACRrF,OAAO,aAGX,gCACE,wBAAQK,KAAK,SAASiF,SAAUR,GAAYE,EAA5C,oBAGA,wBAAQ3E,KAAK,SAASiF,SAAUR,GAAYE,EAAYjE,QAASgE,EAAjE,mCC7IS,CACfQ,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXlG,MAAO,MACPmG,QAAS,mBACTC,OAAQ,iBACRC,UAAW,GACXC,EAAG,EACHC,UAAW,SAGPC,GAAYC,YAAW,CAC3BC,aAAe,CAACC,OAAQ,UAAWrF,MAAO,WAC1CsF,WAAW,aACTb,SAAS,WACTC,IAAI,MACJC,KAAK,MACLY,SAAS,SACTC,OAAO,OACPC,QAAQ,QACRC,WAAa,SAPL,UAQC,QAEXC,OAAQ,CACNH,OAAS,MACTf,SAAU,WACVC,IAAK,MACL,oBAAqB,mBACrB,gBAAiB,mBACjB,UAAa,oBAEfkB,QAAU,CACN,uBAAwB,CACtBC,aAAe,kBACfC,cAAe,MACfC,aAAc,QAGpBC,QAAU,CACRf,UAAY,SACZ,WAAY,CACRvG,MAAO,QAGbuH,SAAU,CAACC,gBAAiB,OAASC,WAAY,cAI7CC,GAAQ,SAACC,EAAKnG,EAAMoG,GACtB,IAAMC,EAAiB,CACnBlG,OAAQ,OACRmG,QAAS,CAAE,eAAgB,mBACf,+BAA4BC,aAAaC,QAAQ,gBAC7DpG,KAAMC,KAAKC,UAAUN,GAAQ,KAE3ByG,EAAiBC,OAAOC,OAAON,EAAgBD,GAAW,IAChE,OAAOQ,MAAMT,EAAKM,IAGhBI,GAAW,SAACzJ,GACd,IAAME,EAAOC,cAab,EAAwBuJ,YAAe,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,WAAe,IAA3C,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAiCJ,WAAe3D,IAAhD,mBAAOgE,EAAP,KAAkBC,EAAlB,KAGM1J,EAASN,EAAMM,OACfuG,EAAUe,KAEhB,OACI,iCACA,sBAAMjF,QAPS,SAACR,GAAOyH,GAAQ,GAAOzH,EAAE8H,mBAObC,UAAWrD,EAAQiB,aAAcqC,MAAK,gBAAjE,SAAqF,cAAC,IAAD,MACrF,cAACC,EAAA,EAAD,CACIF,UAAWrD,EAAQmB,WACnB2B,KAAMA,EACNU,QAVY,SAAClI,GAAOA,EAAE8H,kBAAkBL,GAAQ,IAWhDjH,QAAS,SAACR,GAAD,OAAKA,EAAE8H,mBAChB,kBAAgB,oBAChB,mBAAiB,0BANrB,SAQI,eAAC,IAAD,CAAK/I,GAAI6I,EAAT,UACA,cAAClI,EAAA,EAAD,CAAYE,GAAG,oBAAoBD,QAAQ,KAAKb,UAAU,KAA1D,wBADA,0EAKI,+BACA,uCACA,oCAAKX,QAAL,IAAKA,OAAL,EAAKA,EAAQ4D,OACb,+CACA,oCAAK5D,QAAL,IAAKA,OAAL,EAAKA,EAAQgK,oBACb,uCACA,oCAAKhK,QAAL,IAAKA,OAAL,EAAKA,EAAQiK,OACb,2CACA,oCAAKjK,QAAL,IAAKA,OAAL,EAAKA,EAAQkK,cAEb,eAAC/H,EAAA,EAAD,CAAQX,QAAQ,WAAWa,QAAS,kBA9C7B,SAACrC,GAChB,IAAMmK,EAAU,UAAMvK,EAAK4C,SAAX,iBAA4BxC,EAAOyB,GAAnC,aAChB+H,EAAU,cAACY,EAAA,EAAD,KACVX,EAAU3C,IAAM,MAChB4C,EAAYD,GACZjB,GAAM2B,GACDtH,MAAK,SAAAwH,GAAQ,OAAIA,EAASC,UAC1BzH,MAAK,SAAAP,GACFkH,EAAU,8BAAMlH,QAsCwBiI,CAAWvK,IAAnD,oBAAmE,cAAC,IAAD,IAAnE,OACA,uBAECuJ,WAQJiB,GAAmB,SAAC9K,GAE/B,MAAkB,SAAfA,EAAM+K,KACE,cAAC,GAAD,eAAc/K,IAElB,8BAGIgL,GAAU,SAAChL,GACpB,IAAMM,EAASC,cAEf,OADAgC,QAAQC,IAAIlC,GACL,qCACK,uCACCN,EAAMiL,SAIjBC,GAAmB,SAAClL,GACtBuC,QAAQC,IAAIxC,GACZ,IAAMiG,EAAOkF,cACP7K,EAASC,cACX8B,EAAQ/B,EAASA,EAAM,kBAAwB,GAC7CuG,EAAUe,KAChB,EAAwB8B,YAAe,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KAGA,EAAiCF,WAAe3D,IAAhD,mBAAOgE,EAAP,KACA,GADA,KAC0BL,WAAerH,IAAzC,mBAAO+I,EAAP,KAAcC,EAAd,KACA,EAAgC3B,WAAe,QAA/C,mBAAO4B,EAAP,KAAiBC,EAAjB,KACA,EAAgC7B,WAAe,QAA/C,mBAAO8B,EAAP,KAAiBC,EAAjB,KACA,EAA4B/B,WAAe,UAA3C,mBAAOgC,EAAP,KAAeC,EAAf,KACA,EAA4BjC,WAAe,UAA3C,mBAAOkC,EAAP,KAAeC,EAAf,KACA,EAA8BnC,WAAe,SAA7C,mBAAOoC,EAAP,KAAgBC,GAAhB,KACA,GAA8BrC,WAAe,IAA7C,qBAAOsC,GAAP,MAAgBC,GAAhB,MACM/L,GAAOC,cAMP+L,GAAc,WAChB,IAAIC,EAAM,UAAML,EAAN,OAUV,MATe,UAAZA,EACCK,EAASf,EAGTe,GADgB,WAAZL,EACE,WAAQF,GAGR,UAAON,EAAP,YAAmBE,EAAnB,YAA+BE,EAA/B,YAAyCE,GAE5CO,GAgCX,OAAO,qCACC,cAAC3K,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,IACvC,cAACJ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,QAAS,EAAGC,OAAQ,EAAtC,SACI,cAACoC,EAAA,EAAD,CAAWC,OAAQ,oBAAqBmI,aAAcF,KAAelH,WAAW,sCAAsCb,WAAS,MAEnI,cAAC3C,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,QAAS,EAAGC,OAAQ,EAAtC,SACI,cAACa,EAAA,EAAD,CAAQX,QAAQ,WACRa,QAlED,kBAAMiH,GAAQ,IAmEblH,MAAM,UACN2J,KAAK,QACLnC,UAAWrD,EAAQwB,OAJ3B,oCASJ,cAAC7G,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,IACvC,cAACwI,EAAA,EAAD,CACIT,KAAMA,EACNU,QA5EQ,kBAAMT,GAAQ,IA6EtBM,UAAWrD,EAAQmB,WACnB,kBAAgB,oBAChB,mBAAiB,0BALrB,SAOI,cAAC,IAAD,CAAK9G,GAAI6I,EAAT,SACA,eAACvI,EAAA,EAAD,CAAMmC,WAAS,EAACuG,UAAWrD,EAAQyB,QAAnC,UACI,eAAC9G,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,EAAvC,UACI,cAACC,EAAA,EAAD,CAAYE,GAAG,oBAAoBD,QAAQ,KAAKb,UAAU,KAA1D,oCAGA,0BAEJ,cAACO,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,QAAS,EAAGC,OAAQ,EAAtC,SACI,eAACL,EAAA,EAAD,WACI,cAAC+K,EAAA,EAAD,CAAWvK,GAAG,iCAAd,wBACA,eAACwK,EAAA,EAAD,CACI,kBAAgB,iCAChBlI,aAAa,QACbH,KAAK,sBACLhC,SArFN,SAACC,GACnB4J,GAAW5J,EAAEC,OAAOC,QAgFA,UAMI,cAACmK,EAAA,EAAD,CAAkBnK,MAAM,gBAAgB6C,QAAS,cAACuH,EAAA,EAAD,IAAWzK,MAAM,UAClE,cAACwK,EAAA,EAAD,CAAkBnK,MAAM,SAAS6C,QAAS,cAACuH,EAAA,EAAD,IAAWzK,MAAM,WAC3D,cAACwK,EAAA,EAAD,CAAkBnK,MAAM,aAAa6C,QAAS,cAACuH,EAAA,EAAD,IAAWzK,MAAM,aAC/D,cAACwK,EAAA,EAAD,CAAkBnK,MAAM,SAAS6C,QAAS,cAACuH,EAAA,EAAD,IAAWzK,MAAM,WAC3D,cAACwK,EAAA,EAAD,CAAkBnK,MAAM,eAAe6C,QAAS,cAACuH,EAAA,EAAD,IAAWzK,MAAM,cACjE,cAACwK,EAAA,EAAD,CAAkBnK,MAAM,QAAQ6C,QAAS,cAACuH,EAAA,EAAD,IAAWzK,MAAM,eAE9D,cAAC,IAAD,CAAWD,GAAG,iBAAiBC,MAAM,SAASF,QAAQ,WAC1CuC,aAAchC,EACdH,SAAU,SAACC,GAAD,OAAOkJ,EAASlJ,EAAEC,OAAOC,QAAQ2C,WAAW,gDAI1E,eAACxD,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,QAAS,EAAGC,OAAQ,EAAtC,UACI,cAAC,IAAD,CAAWI,MAAM,WAAWF,QAAQ,WAAWI,SAAU,SAACC,GAAD,OAAKoJ,EAAYpJ,EAAEC,OAAOC,QAAQA,MAAOiJ,IAClG,cAAC,IAAD,CAAWtJ,MAAM,WAAWF,QAAQ,WAAWI,SAAU,SAACC,GAAD,OAAKsJ,EAAYtJ,EAAEC,OAAOC,QAAQA,MAAOmJ,IAClG,cAAC,IAAD,CAAWxJ,MAAM,gBAAgBF,QAAQ,WAAWI,SAAU,SAACC,GAAD,OAAKwJ,EAAUxJ,EAAEC,OAAOC,QAAQA,MAAOqJ,IACrG,cAAC,IAAD,CAAW1J,MAAM,gBAAgBF,QAAQ,WAAWI,SAAU,SAACC,GAAD,OAAK0J,EAAU1J,EAAEC,OAAOC,QAAQA,MAAOuJ,OAEzG,cAACpK,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,QAAS,EAAGC,OAAQ,EAAtC,SACA,eAACC,EAAA,EAAD,iCACuB,sBAAMqI,UAAWrD,EAAQ8B,SAAzB,SAAoCuD,YAG3D,cAAC1K,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,EAAGsI,UAAWrD,EAAQ6B,QAA7D,SACI,yBAEJ,cAAClH,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,IACvC,cAACJ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,QAAS,EAAGC,OAAQ,EAAGsI,UAAWrD,EAAQ6B,QAA5D,SACI,cAACjG,EAAA,EAAD,CAAQX,QAAQ,WAAWY,MAAM,UAAUC,QAAS,kBAlGtD,SAAC2H,GACf,IAAMG,EAAU,UAAMvK,GAAK4C,SAAX,mBAEhBgG,GAAM2B,EADW,CAAEH,kBAAoBA,IAEtCnH,MAAK,SAAAwH,GAAQ,OAAIA,EAASC,UAC1BzH,MAAK,SAAAP,GACFqJ,GAAW,qCAAE,cAACpK,EAAA,EAAD,CAAYC,QAAQ,KAAKb,UAAU,KAAnC,qBAA4D,8BAAM2B,WAElFQ,OAAM,SAAAsJ,GAAG,OAAIC,WA0F0DC,CAAUV,OAAlE,gCAEJ,cAAC1K,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,QAAS,EAAGC,OAAQ,EAAGsI,UAAWrD,EAAQ6B,QAA5D,SACI,cAACjG,EAAA,EAAD,CAAQX,QAAQ,WAAWY,MAAM,UAAUC,QAAS,WAAKiH,GAAQ,GAAQ3D,EAAK4G,OAAO,oBAAoBX,OAAzG,4BAEJ,cAAC1K,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,QAAS,EAAGC,OAAQ,EAAGsI,UAAWrD,EAAQ6B,QAA5D,SACI,cAACjG,EAAA,EAAD,CAAQX,QAAQ,WAAWY,MAAM,UAAUC,QAAS,kBA7FrD,WACf,QAAiBmK,IAAdxM,EAAOyB,GAAiB,CACvB,IAAMgL,EAAM,8BAGZ,OAFAJ,MAAMI,QACNd,GAAWc,GAGf,IAAMtC,EAAU,UAAMvK,GAAK4C,SAAX,iBAA4BxC,EAAOyB,GAAnC,aAChBkK,GAAW,cAACvB,EAAA,EAAD,KACXX,EAAU3C,IAAM,MAChB0B,GAAM2B,GACDtH,MAAK,SAAAwH,GAAQ,OAAIA,EAASC,UAC1BzH,MAAK,SAAAP,GACFqJ,GAAW,8BAAMrJ,QAgF+CiI,IAAe3D,UAAU5G,EAAOyB,GAAmBoI,MAAO7J,EAAOyB,GAAI,GAAK,8BAAlI,4BAEJ,cAACP,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,QAAS,EAAGC,OAAQ,EAAGsI,UAAWrD,EAAQ6B,QAA5D,SACI,cAACjG,EAAA,EAAD,CAAQX,QAAQ,WAAWY,MAAM,UAAUC,QAAS,kBAAIiH,GAAQ,IAAhE,qBAGJ,cAACpI,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,EAAGsI,UAAWrD,EAAQmF,QAA7D,SACKA,gBAQZgB,GAAe,SAAChN,GACzB,IAAMM,EAASC,cACX8B,EAAQ/B,EAASA,EAAM,kBAAwB,GAEnD,MAAkB,SAAfN,EAAM+K,MAAkC,WAAf/K,EAAM+K,MAC9BxI,QAAQC,IAAIxC,GACL,cAAC6B,EAAA,EAAD,UAAaQ,KAGjB,cAAC,GAAD,eAAsBrC,KAIpBiN,GAAS,SAACjN,GACnB,IAAMM,EAASC,cACFJ,cACb,IAAIG,EAAOyB,GACP,OAAO,KAEX,IAAMgH,EAAG,WAAOzI,EAAO4D,KAAd,QACT,OAAO,cAACrC,EAAA,EAAD,UAAY,mBAAGqL,KAAMnE,EAAT,SAAeA,OCxTzBoE,GAAoB,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAC/B,OAAO,cAACC,EAAA,EAAD,CAAWpJ,OAAQmJ,EAAUlJ,KAA2BN,MAAO,CAAClB,MAAQ,QAAhC0K,EAAUlJ,OAGhDoJ,GAAgB,SAACtN,GAAW,IAAD,IAC9BuN,EAAWvN,EAAMwN,SACvB,OAAO,8CAAOD,EAAS1J,kBAAhB,aAAO,EAAqB4J,UAA5B,cAAwCF,EAAS1J,kBAAjD,aAAwC,EAAqB6J,aAG3DC,GAAgB,SAAC3N,GAAW,IAAD,IAC9B4N,EAAW5N,EAAMwN,SACvB,OAAO,oCAAM,sCAAII,EAAS/J,kBAAb,aAAI,EAAqBgK,cAA/B,IAAgD,sCAAID,EAAS/J,kBAAb,aAAI,EAAqBiK,kBAGvEC,GAAoB,SAAC/N,GAE9B,MAAkB,SAAfA,EAAM+K,KACE,yBAEO,SAAf/K,EAAM+K,KACE,qCACH,cAACvJ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,QAAS,EAAGC,OAAQ,EAAvC,SACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKb,UAAU,KAAnC,+BAEJ,eAACO,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,QAAS,EAAGC,OAAQ,EAAtC,UAA0C,cAACwC,EAAA,EAAD,CAAeH,OAAO,cAAhE,OACA,eAACzC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,QAAS,EAAGC,OAAQ,EAAtC,UAA0C,cAACwC,EAAA,EAAD,CAAeH,OAAO,cAAhE,OACA,cAACzC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,QAAS,EAAGC,OAAQ,OAGvC,8BAGEoM,GAAY,SAAChO,GACtB,IAAMM,EAASC,cAEf,OADAgC,QAAQC,IAAIlC,GACL","file":"static/js/1.5b250ec0.chunk.js","sourcesContent":["\r\nexport const MyComp = (props) => {\r\n    return <div>HMMMM</div>\r\n}","import React, { useState } from \"react\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography, Button } from '@material-ui/core';\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport { FormControl } from '@mui/material';\r\nimport {useRecordContext, useDataProvider} from \"react-admin\";\r\nimport {httpAuthClient} from \"../../rav3-jsonapi-client/ra-jsonapi-client\"\r\nimport { useConf } from \"../../Config\";\r\nimport { useNotify } from 'react-admin';\r\n\r\nexport const UserPasswordTab = () => {\r\n    const conf = useConf();\r\n    const notify = useNotify();\r\n    const record = useRecordContext();\r\n    const dataProvider = useDataProvider();\r\n    const [pwdValue, setPwdValue] = useState(\"\");\r\n    const [rpwdValue, setRPwdValue] = useState(\"\");\r\n    const [submitColor, setSubmitColor] = useState(\"\")\r\n    const onPwdChange = (e) => {\r\n        let pwdValue = e.target.value\r\n        setPwdValue(pwdValue)\r\n        setSubmitColor(pwdValue === rpwdValue && pwdValue.length > 5  ? \"primary\" : \"\")\r\n        console.log(pwdValue, rpwdValue);\r\n    }\r\n    const onRPwdVerify = (e) => {\r\n        let rpwdValue = e.target.value\r\n        setRPwdValue(rpwdValue)\r\n        setSubmitColor(pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"\")\r\n        console.log(pwdValue, rpwdValue);\r\n        \r\n    }\r\n    const handleSubmit = () => {\r\n        console.log(rpwdValue);\r\n        if(pwdValue !== rpwdValue){\r\n            notify('Passwords don\\'t match',  { type: 'warning' })\r\n            return\r\n        }\r\n        if(pwdValue.length < 6){\r\n            notify('Password too short',  { type: 'warning' })\r\n            return\r\n        }\r\n        const data = {\r\n            \"password\": pwdValue\r\n        }\r\n        httpAuthClient(`${conf.api_root}/Users/${record.id}/change_password`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        })\r\n        .then(()=>notify('Password Changed!'))\r\n        .catch(()=>notify(`Error Changing Password`,  { type: 'warning' }))\r\n          \r\n    }\r\n\r\n    return (\r\n        <Box\r\n        component=\"form\"\r\n        sx={{\r\n            '& .MuiTextField-root': { m: 1, width: '25ch' },\r\n        }}\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        >\r\n        <FormControl>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n                <Typography variant=\"body2\" component=\"p\" ><b>Change the user password</b></Typography>\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n            <TextField\r\n                id=\"outlined-password-input\"\r\n                label=\"New Password\"\r\n                type=\"password\"\r\n                onChange={onPwdChange}\r\n            />\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n            <TextField\r\n                id=\"outlined-password-input\"\r\n                label=\"Repeat Password\"\r\n                type=\"password\"\r\n                onChange={onRPwdVerify}\r\n            />\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n            <Button variant=\"contained\" color={submitColor} onClick={handleSubmit}>Submit</Button>\r\n            </Grid>\r\n        </FormControl>\r\n        </Box>\r\n    );\r\n}\r\n","import { React } from \"react\";\r\nimport {\r\n    Create,\r\n    SimpleForm,\r\n    PasswordInput,\r\n    TextInput\r\n} from \"react-admin\"\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DynInput from \"./DynInput\";\r\nimport {useConf} from '../Config.js'\r\n\r\nexport const CreateUser  = ({resource_name, ...props}) => {\r\n    const conf = useConf();    \r\n    const resource = conf.resources[resource_name]\r\n\r\n    return <Create {...props}>\r\n                <SimpleForm>\r\n                    <Grid container spacing={3} margin={5} m={400} style={{ width: \"40%\" }}>\r\n                        {resource.attributes.map((attr) => <Grid item xs={12} spacing={4} margin={5} > <TextInput source={attr.name} fullWidth /> </Grid> )}\r\n                        <Grid item xs={12} spacing={4} margin={5} >\r\n                            <PasswordInput label=\"Password\" defaultValue=\"\" fullWidth inputProps={{ autocomplete: 'current-password' }} />\r\n                        </Grid>\r\n                        <Grid item xs={12} spacing={4} margin={5} >\r\n                            <PasswordInput label=\"Repeat Password\" defaultValue=\"\" fullWidth inputProps={{ autocomplete: 'current-password' }}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </SimpleForm>\r\n            </Create >\r\n}\r\n\r\n","import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\n\r\nconst validate = values => {\r\n  const errors = {}\r\n  const requiredFields = [\r\n    'firstName',\r\n    'lastName',\r\n    'email',\r\n    'favoriteColor',\r\n    'notes'\r\n  ]\r\n  requiredFields.forEach(field => {\r\n    if (!values[field]) {\r\n      errors[field] = 'Required'\r\n    }\r\n  })\r\n  if (\r\n    values.email &&\r\n    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n  ) {\r\n    errors.email = 'Invalid email address'\r\n  }\r\n  return errors\r\n}\r\n\r\nconst renderTextField = ({\r\n  label,\r\n  input,\r\n  meta: { touched, invalid, error },\r\n  ...custom\r\n}) => (\r\n  <TextField\r\n    label={label}\r\n    placeholder={label}\r\n    error={touched && invalid}\r\n    helperText={touched && error}\r\n    {...input}\r\n    {...custom}\r\n  />\r\n)\r\n\r\nconst renderCheckbox = ({ input, label }) => (\r\n  <div>\r\n    <FormControlLabel\r\n      control={\r\n        <Checkbox\r\n          checked={input.value ? true : false}\r\n          onChange={input.onChange}\r\n        />\r\n      }\r\n      label={label}\r\n    />\r\n  </div>\r\n)\r\n\r\nconst radioButton = ({ input, ...rest }) => (\r\n  <FormControl>\r\n    <RadioGroup {...input} {...rest}>\r\n      <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\r\n      <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\r\n      <FormControlLabel value=\"other\" control={<Radio />} label=\"Other\" />\r\n    </RadioGroup>\r\n  </FormControl>\r\n)\r\n\r\nconst renderFromHelper = ({ touched, error }) => {\r\n  if (!(touched && error)) {\r\n    return\r\n  } else {\r\n    return <FormHelperText>{touched && error}</FormHelperText>\r\n  }\r\n}\r\n\r\nconst renderSelectField = ({\r\n  input,\r\n  label,\r\n  meta: { touched, error },\r\n  children,\r\n  ...custom\r\n}) => (\r\n  <FormControl error={touched && error}>\r\n    <InputLabel htmlFor=\"age-native-simple\">Age</InputLabel>\r\n    <Select\r\n      native\r\n      {...input}\r\n      {...custom}\r\n      inputProps={{\r\n        name: 'age',\r\n        id: 'age-native-simple'\r\n      }}\r\n    >\r\n      {children}\r\n    </Select>\r\n    {renderFromHelper({ touched, error })}\r\n  </FormControl>\r\n)\r\n\r\nconst MaterialUiForm = props => {\r\n  const { handleSubmit, pristine, reset, submitting, classes } = props\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <Field\r\n          name=\"firstName\"\r\n          component={renderTextField}\r\n          label=\"First Name\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field name=\"lastName\" component={renderTextField} label=\"Last Name\" />\r\n      </div>\r\n      <div>\r\n        <Field name=\"email\" component={renderTextField} label=\"Email\" />\r\n      </div>\r\n      <div>\r\n        <Field name=\"sex\" component={radioButton}>\r\n          <Radio value=\"male\" label=\"male\" />\r\n          <Radio value=\"female\" label=\"female\" />\r\n        </Field>\r\n      </div>\r\n      <div>\r\n        <Field\r\n          classes={classes}\r\n          name=\"favoriteColor\"\r\n          component={renderSelectField}\r\n          label=\"Favorite Color\"\r\n        >\r\n          <option value=\"\" />\r\n          <option value={'ff0000'}>Red</option>\r\n          <option value={'00ff00'}>Green</option>\r\n          <option value={'0000ff'}>Blue</option>\r\n        </Field>\r\n      </div>\r\n      <div>\r\n        <Field name=\"employed\" component={renderCheckbox} label=\"Employed\" />\r\n      </div>\r\n      <div />\r\n      <div>\r\n        <Field\r\n          name=\"notes\"\r\n          component={renderTextField}\r\n          label=\"Notes\"\r\n          multiline\r\n          rowsMax=\"4\"\r\n          margin=\"normal\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\" disabled={pristine || submitting}>\r\n          Submit\r\n        </button>\r\n        <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\r\n          Clear Values\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'MaterialUiForm', // a unique identifier for this form\r\n  validate\r\n  \r\n})(MaterialUiForm)","import * as React from 'react';\nimport { Modal, Box, Grid, TextField  } from \"@material-ui/core\";\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';\nimport Button from '@material-ui/core/Button';\nimport { useConf } from '../Config';\nimport {Loading,\n    TextInput,\n    useRecordContext\n} from 'react-admin'\nimport { useForm } from 'react-final-form';\nimport Radio from '@mui/material/Radio';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport DBForm from './DBForm';\nimport { red } from '@material-ui/core/colors';\n\nconst boxStyle = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: \"75%\",\n  bgcolor: 'background.paper',\n  border: '0px solid #000',\n  boxShadow: 24,\n  p: 4,\n  textAlign: \"left\"\n};\n\nconst useStyles = makeStyles({\n  joined_field : {cursor: \"pointer\", color: \"#3f51b5\"},\n  modalStyle:{\n    position:'absolute',\n    top:'10%',\n    left:'10%',\n    overflow:'scroll',\n    height:'100%',\n    display:'block',\n    fontWeight : \"0.6em\",\n    display: 'flex'\n  },\n  db_btn: {\n    height : \"80%\",\n    position: \"relative\",\n    top: \"50%\",\n    \"-webkit-transform\": \"translateY(-50%)\",\n    \"-ms-transform\": \"translateY(-50%)\",\n    \"transform\": \"translateY(-50%)\"\n  },\n  db_grid : {\n      \"& .MuiTextField-root\": {\n        borderBottom : \"4px solid white\",\n        paddingBottom: \"1em\",\n        paddingRight: \"1em\"\n      }\n  },\n  actions : {\n    textAlign : \"center\",\n    \"& button\": {\n        width: \"99%\"\n    }\n  },\n  conn_str: {backgroundColor: \"#ccc\",  fontFamily: \"Consolas\" }\n});\n\n\nconst C2Rpc = (url, data, options) => {\n    const defaultOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', \n                    'Authorization' : `Bearer ${localStorage.getItem('auth_token')}` },\n        body: JSON.stringify(data || {})\n    }\n    const requestOptions = Object.assign(defaultOptions, options || {})\n    return fetch(url, requestOptions)\n}\n\nconst ApiModal = (props) => {\n    const conf = useConf()\n    const create_api = (record) =>{\n        const create_url = `${conf.api_root}/Apis/${record.id}/generate`\n        setOutput(<Loading/>)\n        box_style.top = \"90%\"\n        setBoxStyle(box_style)\n        C2Rpc(create_url)\n            .then(response => response.json())\n            .then(data => {\n                setOutput(<pre>{data}</pre>)\n            })\n    }\n    \n    const [open, setOpen] = React.useState(false);\n    const [output, setOutput] = React.useState(\"\");\n    const [box_style, setBoxStyle] = React.useState(boxStyle);\n    const handleOpen = (e) => {setOpen(true); e.stopPropagation();}\n    const handleClose = (e) => {e.stopPropagation();setOpen(false);}\n    const record = props.record\n    const classes = useStyles()\n    \n    return (\n        <span>\n        <span onClick={handleOpen} className={classes.joined_field} title={` Relationship` }><PlayCircleOutlineIcon/></span>\n        <Modal\n            className={classes.modalStyle}\n            open={open}\n            onClose={handleClose}\n            onClick={(e)=>e.stopPropagation()}\n            aria-labelledby=\"modal-modal-title\"\n            aria-describedby=\"modal-modal-description\"\n        >\n            <Box sx={box_style}>\n            <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                Create API \n            </Typography>\n                Pressing the button will generate an API with the following properties:\n                <dl>\n                <dt>Name:</dt>\n                <dd>{record?.name}</dd>\n                <dt>Database URL:</dt>\n                <dd>{record?.connection_string}</dd>\n                <dt>Port:</dt>\n                <dd>{record?.port}</dd>\n                <dt>Hostname:</dt>\n                <dd>{record?.hostname}</dd>\n                </dl>\n                <Button variant=\"outlined\" onClick={()=>create_api(record)}> Start <PlayCircleOutlineIcon/> </Button>\n                <hr/>\n                \n                {output}\n                \n            </Box>\n        </Modal>\n        </span>\n    );\n}\n\nexport const ApiGenerateField = (props) => {\n\n  if(props.mode === \"list\"){\n      return <ApiModal {...props}/>\n  }\n  return <></>\n}\n\nexport const ApiShow = (props) => {\n    const record = useRecordContext();\n    console.log(record)   \n    return <>\n                <div>xxxx</div>\n                {props.show}\n            </>\n}\n\nconst DBConnectionEdit = (props) => {\n    console.log(props)\n    const form = useForm();\n    const record = useRecordContext();\n    let value = record ? record[\"connection_string\"] : \"\";\n    const classes = useStyles()\n    const [open, setOpen] = React.useState(false);\n    const handleOpen = () => setOpen(true);\n    const handleClose = () => setOpen(false);\n    const [box_style, setBoxStyle] = React.useState(boxStyle);\n    const [other, setOther] = React.useState(value);\n    const [username, setUsername] = React.useState(\"user\");\n    const [password, setPassword] = React.useState(\"pass\");\n    const [dbhost, setDbhost] = React.useState(\"dbhost\");\n    const [dbname, setDbname] = React.useState(\"dbname\");\n    const [dialect, setDialect] = React.useState(\"Other\");\n    const [logdata, setLogData] = React.useState(\"\")\n    const conf = useConf()\n\n    const selectDialect = (e) => {\n        setDialect(e.target.value)\n    }\n\n    const create_conn = () => {\n        let result = `${dialect}://`\n        if(dialect === \"Other\"){\n            result = other\n        }\n        else if(dialect === \"sqlite\"){\n            result += `/${dbname}`\n        }\n        else {\n            result += `${username}:${password}@${dbhost}/${dbname}`\n        }\n        return result\n    }\n\n    const test_conn = (connection_string) => {\n        const create_url = `${conf.api_root}/Apis/test_conn`\n        const req_data = { connection_string : connection_string}\n        C2Rpc(create_url, req_data)\n        .then(response => response.json())\n        .then(data => {\n            setLogData(<><Typography variant=\"h6\" component=\"h2\">Result:</Typography><pre>{data}</pre></>)\n            })\n        .catch(err => alert())\n    }\n\n    const create_api = () =>{\n        if(record.id === undefined){\n            const msg = \"you must first save the api\"\n            alert(msg)\n            setLogData(msg)\n            return\n        }\n        const create_url = `${conf.api_root}/Apis/${record.id}/generate`\n        setLogData(<Loading/>)\n        box_style.top = \"90%\"\n        C2Rpc(create_url)\n            .then(response => response.json())\n            .then(data => {\n                setLogData(<pre>{data}</pre>)\n            })\n    }\n\n\n    return <>\n            <Grid item xs={12} spacing={4} margin={5} ></Grid>\n            <Grid item xs={4} spacing={4} margin={5} >\n                <TextInput source={'connection_string'} initialValue={create_conn()} helperText=\"SQLAlchemy connection string syntax\" fullWidth/>\n            </Grid>\n            <Grid item xs={4} spacing={4} margin={5} >\n                <Button variant=\"outlined\"\n                        onClick={handleOpen}\n                        color=\"primary\"\n                        size='large'\n                        className={classes.db_btn}\n                > \n                Configure Connection\n                </Button>\n            </Grid>\n            <Grid item xs={12} spacing={4} margin={5} ></Grid>\n            <Modal\n                open={open}\n                onClose={handleClose}\n                className={classes.modalStyle}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n                >\n                <Box sx={box_style}>\n                <Grid container className={classes.db_grid}>\n                    <Grid item xs={12} spacing={4} margin={5} >\n                        <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n                        Database Configuration\n                        </Typography>\n                        <hr/>\n                    </Grid>\n                    <Grid item xs={6} spacing={4} margin={5} >\n                        <FormControl>\n                            <FormLabel id=\"demo-radio-buttons-group-label\">DB Dialect</FormLabel>\n                            <RadioGroup\n                                aria-labelledby=\"demo-radio-buttons-group-label\"\n                                defaultValue=\"Other\"\n                                name=\"radio-buttons-group\"\n                                onChange={selectDialect}\n                            >\n                                <FormControlLabel value=\"mysql+pymysql\" control={<Radio />} label=\"MySQL\" />\n                                <FormControlLabel value=\"oracle\" control={<Radio />} label=\"Oracle\" />\n                                <FormControlLabel value=\"postgresql\" control={<Radio />} label=\"Postgres\" />\n                                <FormControlLabel value=\"sqlite\" control={<Radio />} label=\"SQLite\" />\n                                <FormControlLabel value=\"mssql+pyodbc\" control={<Radio />} label=\"SQLServer\" />\n                                <FormControlLabel value=\"Other\" control={<Radio />} label=\"Manual:\" />\n                            </RadioGroup>\n                            <TextField id=\"outlined-basic\" label=\"Manual\" variant=\"outlined\" \n                                        defaultValue={value}\n                                        onChange={(e) => setOther(e.target.value)} helperText=\"Manual connection string configuration\"/>\n                        </FormControl>\n                    </Grid>\n                    \n                    <Grid item xs={6} spacing={4} margin={5} >\n                        <TextField label=\"Username\" variant=\"outlined\" onChange={(e)=>setUsername(e.target.value)} value={username}/>\n                        <TextField label=\"Password\" variant=\"outlined\" onChange={(e)=>setPassword(e.target.value)} value={password}/>\n                        <TextField label=\"Database host\" variant=\"outlined\" onChange={(e)=>setDbhost(e.target.value)} value={dbhost}/>\n                        <TextField label=\"Database name\" variant=\"outlined\" onChange={(e)=>setDbname(e.target.value)} value={dbname}/>\n                    </Grid>\n                    <Grid item xs={6} spacing={4} margin={5}>\n                    <Typography>\n                        Connection String: <span className={classes.conn_str}>{create_conn()}</span>\n                    </Typography>\n                    </Grid>\n                    <Grid item xs={12} spacing={4} margin={5} className={classes.actions}>\n                        <hr/>\n                    </Grid>\n                    <Grid item xs={12} spacing={4} margin={5} />\n                    <Grid item xs={2} spacing={4} margin={5} className={classes.actions}>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={()=>test_conn(create_conn()) }> Test Connection</Button>\n                    </Grid>\n                    <Grid item xs={2} spacing={4} margin={5} className={classes.actions}>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={()=>{setOpen(false); form.change('connection_string',create_conn()); }} >Save &amp; Close</Button>\n                    </Grid>\n                    <Grid item xs={2} spacing={4} margin={5} className={classes.actions}>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={()=>create_api() } disabled={record.id ? false : true} title={record.id? \"\" : \"you must first save the api\"}>Generate API</Button>\n                    </Grid>\n                    <Grid item xs={2} spacing={4} margin={5} className={classes.actions}>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={()=>setOpen(false) }>Close</Button>\n                    </Grid>\n                    \n                    <Grid item xs={12} spacing={4} margin={5} className={classes.logdata}>\n                        {logdata}\n                    </Grid>\n                </Grid>\n                </Box>\n            </Modal>\n        </>\n}\n\nexport const DBConnection = (props) => {\n    const record = useRecordContext();\n    let value = record ? record[\"connection_string\"] : \"\";\n    \n    if(props.mode !== \"edit\" && props.mode !== \"create\"){\n        console.log(props)\n        return <Typography>{value}</Typography>\n    }\n\n    return <DBConnectionEdit {...props} />\n}\n\n\nexport const ApiURL = (props) => {\n    const record = useRecordContext();\n    const conf = useConf()\n    if(!record.id){\n        return null\n    }\n    const url = `/${record.name}/api`\n    return <Typography><a href={url}>{url}</a></Typography>\n}","import { React } from \"react\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\nimport { List,\r\n    Datagrid,\r\n    TextField,\r\n    EditButton,\r\n    SaveButton,\r\n    PasswordInput\r\n} from \"react-admin\";\r\n\r\nimport Button from '@mui/material/Button';\r\nimport {useRecordContext, useDataProvider} from \"react-admin\";\r\nimport {MyComp} from './external'\r\n//import CreateUser from './CreateUser'\r\nexport {UserPasswordTab} from './external/UserPasswordTab'\r\nexport {CreateUser} from './CreateUser'\r\nexport * from './ApiAdmin'\r\nexport * from './external'\r\n\r\n\r\nexport const SampleColumnField = ({attribute}) => {\r\n    return <TextField source={attribute.name} key={attribute.name} style={{color : \"red\" }} />\r\n}\r\n\r\nexport const EmployeeLabel = (props) => {\r\n    const employee = props.instance\r\n    return <div> {employee.attributes?.FirstName} {employee.attributes?.LastName}</div>\r\n}\r\n\r\nexport const CustomerLabel = (props) => {\r\n    const customer = props.instance\r\n    return <div> <b>{customer.attributes?.CompanyName}</b> <i>{customer.attributes?.ContactName}</i></div>\r\n}\r\n\r\nexport const UserPasswordField = (props) => {\r\n\r\n    if(props.mode === \"list\"){\r\n        return <span/>\r\n    }\r\n    if(props.mode === \"edit\"){\r\n        return <>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n                <Typography variant=\"h6\" component=\"h6\" >Change Password</Typography>\r\n            </Grid>\r\n            <Grid item xs={4} spacing={4} margin={5} ><PasswordInput source=\"_password\" /> </Grid>\r\n            <Grid item xs={4} spacing={4} margin={5} ><PasswordInput source=\"_password\" /> </Grid>\r\n            <Grid item xs={4} spacing={4} margin={5} ></Grid>\r\n        </>\r\n    }\r\n    return <></>\r\n}\r\n\r\nexport const CustomTab = (props) => {\r\n    const record = useRecordContext();\r\n    console.log(record)\r\n    return <div>Some Text</div>\r\n}\r\n"],"sourceRoot":""}